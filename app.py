from flask import Flask, request, jsonify
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
from urllib.parse import parse_qs
import traceback
import re
import os
import json

CONTACT_STATE = "contact_conversation"

app = Flask(__name__)

CHANNEL_ACCESS_TOKEN = '0wrW85zf5NXhGWrHRjwxitrZ33JPegxtB749lq9TWRlrlCvfl0CKN9ceTw+kzPqBc6yjEOlV3EJOqUsBNhiFGQu3asN1y6CbHIAkJINhHNWi5gY9+O3+SnvrPaZzI7xbsBuBwe8XdIx33wdAN+79bgdB04t89/1O/w1cDnyilFU='

LINE_HEADERS = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {CHANNEL_ACCESS_TOKEN}'
}

user_states = {}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
def info_row(label, value):
    return {
        "type": "box",
        "layout": "horizontal",
        "contents": [
            {
                "type": "text",
                "text": label,
                "size": "sm",
                "color": "#AAAAAA",
                "flex": 2
            },
            {
                "type": "text",
                "text": value if value else "-",
                "size": "sm",
                "wrap": True,
                "flex": 4
            }
        ]
    }

def status_row(label, value, color):
    return {
        "type": "box",
        "layout": "horizontal",
        "margin": "md",
        "contents": [
            {
                "type": "text",
                "text": label,
                "size": "sm",
                "color": "#AAAAAA",
                "flex": 2
            },
            {
                "type": "text",
                "text": value,
                "size": "sm",
                "color": color,
                "weight": "bold",
                "flex": 4
            }
        ]
    }

def get_google_credentials():
    """‡∏î‡∏∂‡∏á credentials ‡∏à‡∏≤‡∏Å environment variables"""
    try:
        creds_json = os.getenv('GOOGLE_CREDENTIALS')
        if not creds_json:
            raise ValueError("GOOGLE_CREDENTIALS environment variable not set")
        
        creds_dict = json.loads(creds_json)
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        return creds
    except Exception as e:
        print("‚ùå Error getting Google credentials:", e)
        traceback.print_exc()
        return None

def get_google_sheet():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet"""
    try:
        creds = get_google_credentials()
        if not creds:
            return None
            
        client = gspread.authorize(creds)
        sheet_name = os.getenv('GOOGLE_SHEET_NAME', 'Tickets')
        sheet = client.open(sheet_name).sheet1
        return sheet
    except Exception as e:
        print("‚ùå Error connecting to Google Sheet:", e)
        traceback.print_exc()
        return None

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ LINE Helpdesk is running.", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        payload = request.json
        events = payload.get('events', [])

        for event in events:
            if event.get('type') == 'message' and event['message'].get('type') == 'text':
                handle_text_message(event)
            elif event.get('type') == 'postback':
                handle_postback(event)
                
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        print("‚ùå ERROR in webhook():", e)
        traceback.print_exc()
        return jsonify({"status": "error", "message": str(e)}), 500

def handle_postback(event):
    data = event['postback']['data']
    params = event['postback'].get('params', {})
    reply_token = event['replyToken']
    user_id = event['source']['userId']
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å postback data
    from urllib.parse import parse_qs
    data_dict = parse_qs(data)
    
    if 'action' in data_dict:
        action = data_dict['action'][0]
        
        if action == "select_date":
            selected_date = params.get('date', '')
            if selected_date:
                selected_datetime = datetime.strptime(selected_date, "%Y-%m-%d")
                today = datetime.now().date()
                if selected_datetime.date() < today:
                    reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")
                    return
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                formatted_date = selected_datetime.strftime("%d/%m/%Y")
                user_states[user_id]["selected_date"] = selected_date
                send_time_picker(reply_token, formatted_date)
                
        if action == "view_history":
            selected_date = params.get('date', '')
            ticket_id = data_dict.get('ticket_id', [''])[0]
            if selected_date:
                show_monthly_history(reply_token, user_id, selected_date, ticket_id)


def show_monthly_history(reply_token, user_id, selected_date, ticket_id=None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Ticket ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏õ‡∏µ
        selected_month = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%Y-%m")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user_tickets = get_all_user_tickets(user_id)
        
        if not user_tickets:
            reply(reply_token, f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}")
            return
        
        # ‡∏Å‡∏£‡∏≠‡∏á Ticket ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        monthly_tickets = [
            t for t in user_tickets 
            if t['date'].startswith(selected_month) and t['date'] != '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        ]
        
        if not monthly_tickets:
            reply(reply_token, f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        bubbles = []
        for ticket in monthly_tickets[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 Ticket ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            status_color = "#1DB446" if ticket['status'] == "Completed" else "#FF0000" if ticket['status'] == "Rejected" else "#005BBB"
            
            try:
                ticket_date = datetime.strptime(ticket['date'], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y %H:%M")
            except:
                ticket_date = ticket['date']
            
            bubble = {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÖ {ticket_date}",
                            "weight": "bold",
                            "size": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        info_row("Ticket ID", ticket['ticket_id']),
                        info_row("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ticket['type']),
                        status_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ticket['status'], status_color)
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "button",
                            "action": {
                                "type": "message",
                                "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                                "text": f"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î {ticket['ticket_id']}"
                            },
                            "style": "primary",
                            "color": "#005BBB"
                        }
                    ]
                }
            }
            bubbles.append(bubble)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
        summary_text = {
            "type": "text",
            "text": f"üìä ‡∏û‡∏ö {len(monthly_tickets)} Ticket ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}",
            "wrap": True
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏ö‡∏ö Carousel
        if len(bubbles) > 1:
            flex_message = {
                "type": "flex",
                "altText": f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Ticket ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles
                }
            }
        else:
            flex_message = {
                "type": "flex",
                "altText": f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Ticket ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}",
                "contents": bubbles[0]
            }
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞ Flex Message
        send_reply_message(reply_token, [summary_text, flex_message])
        
    except Exception as e:
        print("‚ùå Error in show_monthly_history:", str(e))
        traceback.print_exc()
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

def handle_text_message(event):
    user_message = event['message']['text'].strip()
    reply_token = event['replyToken']
    user_id = event['source']['userId']
    
    reset_keywords = ["‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"]
    if user_id in user_states and any(user_message.startswith(k) for k in reset_keywords):
        del user_states[user_id]
    
    
    if user_message.startswith(("confirm_", "cancel_")):
        handle_confirmation(event)
        return
    
    if user_id in user_states and user_states[user_id].get("step") == CONTACT_STATE:
        if not check_existing_user(user_id):
            del user_states[user_id]
            reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà")
            return
        
        if user_message.lower() in ["end", "‡∏à‡∏ö", "‡∏´‡∏¢‡∏∏‡∏î", "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å","‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]:
            del user_states[user_id]
            reply(reply_token, "‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
            return
        else:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô confirm
            user_states[user_id]["contact_message"] = user_message
            user_states[user_id]["step"] = "pre_contact"
            
            # ‡∏™‡πà‡∏á Confirm Message
            confirm_msg = create_confirm_message(
                "contact",
                f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {user_message}"
            )
            send_reply_message(reply_token, [confirm_msg])
            return
        
    if user_message == "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà":
        if not check_existing_user(user_id):
            reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ")
            return
        
        user_states[user_id] = {
            "step": CONTACT_STATE,
            "service_type": "Contact",
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        quick_reply = {
            "type": "text",
            "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏ö' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
            "quickReply": {
                "items": [{
                    "type": "action",
                    "action": {
                        "type": "message",
                        "label": "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
                        "text": "‡∏à‡∏ö"
                    }
                }]
            }
        }
        send_reply_message(reply_token, [quick_reply])
        return
    
    if is_valid_email(user_message):
        if check_existing_email(user_message):
            reply(reply_token, "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞")
            send_flex_choice(user_id)
            return

    if user_id in user_states:
        if user_states[user_id].get("step") == "ask_request":
            handle_user_request(reply_token, user_id, user_message)
            return
        if user_states[user_id].get("step") == "ask_helpdesk_issue":
            handle_helpdesk_issue(reply_token, user_id, user_message)
            return
        if user_states[user_id].get("step") == "ask_appointment" and "selected_date" in user_states[user_id]:
            if user_message == "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á":
                reply(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM-HH:MM\n‡πÄ‡∏ä‡πà‡∏ô 11:30-12:45")
                return
            elif re.fullmatch(r"\d{2}:\d{2}-\d{2}:\d{2}", user_message):
                start_time, end_time = user_message.split('-')
                if validate_time(start_time) and validate_time(end_time):
                    if is_time_before(start_time, end_time):
                        selected_date = user_states[user_id]["selected_date"]
                        appointment_datetime = f"{selected_date} {user_message}"
                        handle_save_appointment(reply_token, user_id, appointment_datetime)
                    else:
                        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
                else:
                    reply(reply_token, "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM-HH:MM\n‡πÄ‡∏ä‡πà‡∏ô 11:30-12:45")
                return
                
        handle_user_state(reply_token, user_id, user_message)
        return
    
    if user_message == "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤":
        handle_report_issue(reply_token, user_id)
    elif user_message == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        handle_cancel(reply_token, user_id)
    elif user_message == "‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" or user_message == "‡∏î‡∏π Ticket ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        check_latest_ticket(reply_token, user_id)
    elif user_message.startswith("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
        handle_register(reply_token, user_id, user_message)
    elif user_message == "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤":
        handle_appointment(reply_token, user_id)
    elif user_message == "Helpdesk":
        handle_helpdesk(reply_token, user_id)
    elif user_message.startswith("‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ") or user_message.startswith("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏≠‡∏á"):
        handle_appointment_time(reply_token, user_id, user_message)
    elif re.search(r"TICKET-\d{14}", user_message):
        match = re.search(r"(TICKET-\d{14})", user_message)
        ticket_id = match.group(1)
        show_ticket_details(reply_token, ticket_id, user_id)
    elif user_message.startswith("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î "):
        ticket_id = user_message.replace("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ", "").strip()
        show_ticket_details(reply_token, ticket_id, user_id)
    else:
        reply(reply_token, "üìå ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")

def handle_confirmation(event):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    user_message = event['message']['text'].strip()
    reply_token = event['replyToken']
    user_id = event['source']['userId']
    
    if user_id not in user_states:
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        return
    
    if user_message.startswith("confirm_"):
        action_type = user_message.replace("confirm_", "")
        state = user_states[user_id]
        
        try:
            if action_type == "helpdesk" and state.get("step") == "pre_helpdesk":
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Ticket ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô state
                if "email" not in state:
                    latest_ticket = get_latest_ticket(user_id)
                    if latest_ticket:
                        state["email"] = latest_ticket.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '')
                        state["name"] = latest_ticket.get('‡∏ä‡∏∑‡πà‡∏≠', '')
                        state["phone"] = latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '')
                        state["department"] = latest_ticket.get('‡πÅ‡∏ú‡∏ô‡∏Å', '')
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                ticket_id = generate_ticket_id()
                success = save_helpdesk_to_sheet(
                    ticket_id,
                    user_id,
                    state.get("email", ""),
                    state.get("name", ""),
                    state.get("phone", ""),
                    state.get("department", ""),
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    state.get("issue_text", "")
                )
                
                if success:
                    send_helpdesk_summary(user_id, ticket_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                                        state.get("issue_text", ""), state.get("email", ""), 
                                        state.get("name", ""), state.get("phone", ""), 
                                        state.get("department", ""))
                    reply(reply_token, f"‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\nTicket ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {ticket_id} \n ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ")
                else:
                    reply(reply_token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                
                del user_states[user_id]
                
            elif action_type == "service" and state.get("step") == "pre_service":
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Ticket ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô state
                if "email" not in state:
                    latest_ticket = get_latest_ticket(user_id)
                    if latest_ticket:
                        state["email"] = latest_ticket.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '')
                        state["name"] = latest_ticket.get('‡∏ä‡∏∑‡πà‡∏≠', '')
                        state["phone"] = latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '')
                        state["department"] = latest_ticket.get('‡πÅ‡∏ú‡∏ô‡∏Å', '')
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                ticket_id = generate_ticket_id()
                success = save_appointment_with_request(
                    ticket_id,
                    user_id,
                    state.get("email", ""),
                    state.get("name", ""),
                    state.get("phone", ""),
                    state.get("department", ""),
                    state.get("appointment_datetime", ""),
                    state.get("request_text", "")
                )
                
                if success:
                    send_ticket_summary_with_request(
                        user_id, ticket_id, state.get("appointment_datetime", ""), 
                        state.get("request_text", ""), state.get("email", ""), 
                        state.get("name", ""), state.get("phone", ""), 
                        state.get("department", "")
                    )
                    reply(reply_token, f"‚úÖ\nTicket ID ‡∏Ç‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {ticket_id} \n ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
                else:
                    reply(reply_token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                
                del user_states[user_id]
                
            elif action_type == "contact" and state.get("step") == "pre_contact":
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ email ‡πÉ‡∏ô state
                save_contact_message(user_id, state.get("contact_message", ""), is_user=True)
                reply(reply_token, "üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
                del user_states[user_id]
                
        except Exception as e:
            print(f"‚ùå Error in handle_confirmation: {str(e)}")
            traceback.print_exc()
            reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
            if user_id in user_states:
                del user_states[user_id]
                
    elif user_message.startswith("cancel_"):
        if user_id in user_states:
            del user_states[user_id]
        reply(reply_token, "‚ùå ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")

def save_contact_message(user_id, message, is_user=False, is_system=False):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Textbox ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False
            
        # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ User ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
        cell = sheet.find(str(user_id))
        if not cell:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return False
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
        current_text = sheet.cell(cell.row, 13).value or ""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        new_text = f"{message}"
        
        # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        if len(new_text) > 50000:
            new_text = new_text[-50000:]
        
        sheet.update_cell(cell.row, 13, new_text)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if is_user:
            sheet.update_cell(cell.row, 8, "None")
        
        return True
    except Exception as e:
        print(f"‚ùå Error saving contact message: {e}")
        traceback.print_exc()
        return False

def save_contact_request(user_id, message):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏á Google Sheet"""
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        
        # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ User ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
        cell = sheet.find(user_id)
        if not cell:
            return False
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Textbox (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 13)
        current_text = sheet.cell(cell.row, 13).value or ""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        new_text = f"{current_text}[‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]{timestamp}: {message}"
        
        # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (Limit ‡∏Ç‡∏≠‡∏á Google Sheets)
        if len(new_text) > 50000:
            new_text = new_text[-50000:]
        
        sheet.update_cell(cell.row, 13, new_text)
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ID: {user_id}")
        return True
    except Exception as e:
        print("‚ùå Error saving contact request:", e)
        traceback.print_exc()
        return False

def validate_time(time_str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    try:
        hours, minutes = map(int, time_str.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            return True
        return False
    except:
        return False

def handle_appointment_time(reply_token, user_id, user_message):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å state
    state = user_states[user_id]
    ticket_id = state["ticket_id"]
    
    # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if user_message.startswith("‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ "):
        appointment_time = user_message.replace("‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ", "").strip()
    elif user_message == "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏≠‡∏á":
        reply(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM-HH:MM ‡πÄ‡∏ä‡πà‡∏ô 13:00-14:00")
        return
    else:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        if not re.fullmatch(r"\d{2}:\d{2}-\d{2}:\d{2}", user_message):
            reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM-HH:MM ‡πÄ‡∏ä‡πà‡∏ô 13:00-14:00")
            return
        appointment_time = user_message
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheet
    success = save_appointment_to_sheet(ticket_id, appointment_time)
    if success:
        reply(reply_token, f"‚úÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ {appointment_time} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticket {ticket_id}")
        
        # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        send_appointment_summary(user_id, ticket_id, appointment_time)
    else:
        reply(reply_token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    del user_states[user_id]

def send_appointment_summary(user_id, ticket_id, appointment_datetime):
    try:
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        date_part, time_range = appointment_datetime.split()
        start_time, end_time = time_range.split('-')
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        dt = datetime.strptime(date_part, "%Y-%m-%d")
        formatted_date = dt.strftime("%d/%m/%Y")
        
        flex_message = {
            "type": "flex",
            "altText": f"‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ {ticket_id}",
            "contents": {
                "type": "bubble",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‚úÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#1DB446"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {"type": "text", "text": f"Ticket ID: {ticket_id}", "wrap": True, "size": "sm"},
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:",
                                    "size": "sm",
                                    "color": "#AAAAAA",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": formatted_date,
                                    "size": "sm",
                                    "flex": 4
                                }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‡πÄ‡∏ß‡∏•‡∏≤:",
                                    "size": "sm",
                                    "color": "#AAAAAA",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": f"{start_time} - {end_time}",
                                    "size": "sm",
                                    "flex": 4
                                }
                            ]
                        },
                        {"type": "text", "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞", "wrap": True, "size": "sm", "margin": "md"}
                    ]
                }
            }
        }

        body = {
            "to": user_id,
            "messages": [flex_message]
        }

        res = requests.post('https://api.line.me/v2/bot/message/push', headers=LINE_HEADERS, json=body)
        print("üì§ Sent Appointment Summary:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Error sending Appointment Summary:", e)
        traceback.print_exc()

def handle_user_state(reply_token, user_id, user_message):
    state = user_states[user_id]
    step = state.get("step")

    if step == "ask_issue":
        handle_ask_issue(reply_token, user_id, user_message, state)
    elif step == "ask_category":
        handle_ask_category(reply_token, user_id, user_message, state)
    elif step == "ask_department":
        handle_ask_department(reply_token, user_id, user_message, state)
    elif step == "ask_phone":
        handle_ask_phone(reply_token, user_id, user_message, state)

def handle_ask_issue(reply_token, user_id, user_message, state):
    email = user_message
    if not is_valid_email(email):
        reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô example@domain.com")
        return
    if check_existing_email(email):
        reply(reply_token, "‚ö†Ô∏è ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
        send_flex_choice(user_id)
        del user_states[user_id]
        return
    
    state["issue"] = email
    state["step"] = "ask_category"
    reply(reply_token, "üìÇ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

def handle_ask_category(reply_token, user_id, user_message, state):
    state["category"] = user_message
    state["step"] = "ask_department"
    send_department_flex_message(reply_token)

def handle_ask_department(reply_token, user_id, user_message, state):
    if user_message in ["‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£", "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢", "‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£", "‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô", "‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®", "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£","‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£", "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤", "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö", "‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", "‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"]:
        state["department"] = user_message
        state["step"] = "ask_phone"
        reply(reply_token, "üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö")
    else:
        reply(reply_token, "‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£, ‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô, ‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢, ‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£, ‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô, ‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®, ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£,‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£, ‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤, ‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö, ‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô, ‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à")
        send_department_quick_reply(reply_token)

def handle_ask_phone(reply_token, user_id, user_message, state):
    phone = user_message
    if not re.fullmatch(r"0\d{9}", phone):
        reply(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 10 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 0812345678")
        return

    state["phone"] = phone
    ticket_id = generate_ticket_id()
    success = save_ticket_to_sheet(user_id, state, ticket_id)
    if success:
        send_flex_ticket_summary(user_id, state, ticket_id)
        send_flex_choice(user_id)
    else:
        reply(reply_token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet")
    del user_states[user_id]

def handle_report_issue(reply_token, user_id):
    if check_existing_user(user_id):
        reply(reply_token, "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö")
        send_flex_choice(user_id)
    else:
        user_states[user_id] = {"step": "ask_issue"}
        reply(reply_token, "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

def handle_cancel(reply_token, user_id):
    if user_id in user_states:
        del user_states[user_id]
    reply(reply_token, "‚ùé ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

def handle_register(line_bot_api, reply_token, user_id, user_message):
    parsed = parse_issue_message(user_message)
    if parsed:
        ticket_id = generate_ticket_id()
        
        # ‡πÉ‡∏ä‡πâ Excel Online ‡πÅ‡∏ó‡∏ô Google Sheets
        success = save_ticket_to_excel_online(
            user_id,
            {
                'email': parsed.get('issue', ''),
                'name': parsed.get('category', ''),
                'phone': parsed.get('phone', ''),
                'department': parsed.get('department', '-'),
                'type': 'Information'
            },
            ticket_id
        )
        
        if success:
            reply_message(line_bot_api, reply_token, f"‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ : {ticket_id}")
            send_flex_ticket_summary(line_bot_api, user_id, parsed, ticket_id)
        else:
            reply_message(line_bot_api, reply_token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel Online")
    else:
        reply_message(line_bot_api, reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

def check_latest_ticket(reply_token, user_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        user_tickets = get_all_user_tickets(user_id)
        
        if not user_tickets:
            reply(reply_token, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket
        bubbles = []
        for ticket in user_tickets:
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            status_color = "#1DB446" if ticket['status'] == "Completed" else "#FF0000" if ticket['status'] == "Rejected" else "#005BBB"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
            try:
                ticket_date = datetime.strptime(ticket['date'], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y %H:%M")
            except:
                ticket_date = ticket['date']
            
            bubble = {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÑ Ticket {ticket['ticket_id']}",
                            "weight": "bold",
                            "size": "md",
                            "color": "#005BBB"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        info_row("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ticket['type']),
                        info_row("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ticket_date),
                        status_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ticket['status'], status_color)
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "button",
                            "action": {
                                "type": "message",
                                "label": "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                                "text": f"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î {ticket['ticket_id']}"
                            },
                            "style": "primary",
                            "color": "#005BBB"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "datetimepicker",
                                "label": "‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á",
                                "data": f"action=view_history&ticket_id={ticket['ticket_id']}",
                                "mode": "date",
                                "initial": datetime.now().strftime("%Y-%m-01"),
                                "max": datetime.now().strftime("%Y-%m-%d")
                            },
                            "style": "secondary",
                            "color": "#5DADE2",
                            "margin": "sm"
                        }
                    ]
                }
            }
            bubbles.append(bubble)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        guide_message = {
            "type": "text",
            "text": "üìå ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Ticket ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á' ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            "wrap": True
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏ö‡∏ö Carousel ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ Ticket
        if len(bubbles) > 1:
            flex_message = {
                "type": "flex",
                "altText": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles[:10]  # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 Ticket
                }
            }
        else:
            flex_message = {
                "type": "flex",
                "altText": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                "contents": bubbles[0]
            }
        
        # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞ Flex Message
        send_reply_message(reply_token, [guide_message, flex_message])
        
    except Exception as e:
        print("‚ùå Error in check_latest_ticket:", str(e))
        traceback.print_exc()
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket")

def show_ticket_details(reply_token, ticket_id, user_id=None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        data = sheet.get_all_records()
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Ticket ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ticket_id
        found_ticket = None
        for row in data:
            if row.get('Ticket ID') == ticket_id or row.get('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket') == ticket_id:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Ticket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user_id)
                if not user_id or str(row.get('User ID', '')).strip() == str(user_id).strip():
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                    phone = str(row.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', ''))
                    phone = phone.replace("'", "")
                    if phone and not phone.startswith('0'):
                        phone = '0' + phone[-9:]
                    
                    found_ticket = {
                        'ticket_id': row.get('Ticket ID', 'TICKET-UNKNOWN'),
                        'email': row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'name': row.get('‡∏ä‡∏∑‡πà‡∏≠', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'phone': phone,
                        'department': row.get('‡πÅ‡∏ú‡∏ô‡∏Å', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'date': row.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'status': row.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'Pending'),
                        'appointment': row.get('Appointment', 'None'),
                        'requeste': row.get('Requeste', 'None'),
                        'report': row.get('Report', 'None'),
                        'type': row.get('Type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                    }
                    break
        
        if not found_ticket:
            reply(reply_token, f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket {ticket_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket
        flex_message = create_ticket_flex_message(found_ticket)
        if not flex_message:
            reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket Summary")
            return
            
        send_reply_message(reply_token, [flex_message])
        
    except Exception as e:
        print("‚ùå Error in show_ticket_details:", str(e))
        traceback.print_exc()
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket")

def show_ticket_details(reply_token, ticket_id, user_id=None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        data = sheet.get_all_records()
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Ticket ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ticket_id
        found_ticket = None
        for row in data:
            if row.get('Ticket ID') == ticket_id or row.get('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket') == ticket_id:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Ticket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user_id)
                if not user_id or str(row.get('User ID', '')).strip() == str(user_id).strip():
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                    phone = str(row.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', ''))
                    phone = phone.replace("'", "")
                    if phone and not phone.startswith('0'):
                        phone = '0' + phone[-9:]
                    
                    found_ticket = {
                        'ticket_id': row.get('Ticket ID', 'TICKET-UNKNOWN'),
                        'email': row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'name': row.get('‡∏ä‡∏∑‡πà‡∏≠', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'phone': phone,
                        'department': row.get('‡πÅ‡∏ú‡∏ô‡∏Å', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'date': row.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                        'status': row.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'Pending'),
                        'appointment': row.get('Appointment', 'None'),
                        'requeste': row.get('Requeste', 'None'),
                        'report': row.get('Report', 'None'),
                        'type': row.get('Type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                    }
                    break
        
        if not found_ticket:
            reply(reply_token, f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket {ticket_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket
        flex_message = create_ticket_flex_message(found_ticket)
        if not flex_message:
            reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket Summary")
            return
            
        send_reply_message(reply_token, [flex_message])
        
    except Exception as e:
        print("‚ùå Error in show_ticket_details:", str(e))
        traceback.print_exc()
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket")

def save_helpdesk_to_sheet(ticket_id, user_id, email, name, phone, department, report_time, appointment_time, issue_text):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Helpdesk Ticket ‡∏•‡∏á Google Sheet"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ticket ID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        existing_tickets = sheet.col_values(1)
        if ticket_id in existing_tickets:
            ticket_id = generate_ticket_id()
            
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        formatted_phone = format_phone_number(phone)
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        sheet.append_row([
            ticket_id,
            user_id,
            email,
            name,
            formatted_phone,  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            department,
            report_time,
            "Pending",
            appointment_time,
            "None",  # Requeste
            issue_text if issue_text else "None",  # Report
            "Helpdesk"  # Type - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Helpdesk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        ], value_input_option='USER_ENTERED')
        
        print(f"‚úÖ Saved Helpdesk ticket: {ticket_id}")
        return True
    except Exception as e:
        print("‚ùå Error saving Helpdesk ticket:", e)
        traceback.print_exc()
        return False

def create_ticket_flex_message(ticket_data):
    try:
        status_color = "#1DB446" if ticket_data['status'] == "Completed" else "#FF0000" if ticket_data['status'] == "Rejected" else "#005BBB"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Flex Message
        contents = [
            info_row("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ticket_data['type']),
            info_row("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", ticket_data['email']),
            info_row("‡∏ä‡∏∑‡πà‡∏≠", ticket_data['name']),
            info_row("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", display_phone_number(ticket_data['phone'])),
            info_row("‡πÅ‡∏ú‡∏ô‡∏Å", ticket_data['department']),
            info_row("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ticket_data['date']),
            {
                "type": "separator",
                "margin": "md"
            }
        ]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Ticket
        if ticket_data['type'] == "Service":
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Service Type - ‡πÅ‡∏™‡∏î‡∏á Requeste
            if ticket_data['requeste'] != "None":
                contents.append({
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:",
                            "size": "sm",
                            "color": "#AAAAAA",
                            "flex": 2
                        },
                        {
                            "type": "text",
                            "text": ticket_data['requeste'],
                            "size": "sm",
                            "wrap": True,
                            "flex": 4
                        }
                    ]
                })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if ticket_data['appointment'] != "None":
                try:
                    date_part, time_range = ticket_data['appointment'].split()
                    dt = datetime.strptime(date_part, "%Y-%m-%d")
                    formatted_date = dt.strftime("%d/%m/%Y")
                    contents.append(info_row("‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", formatted_date))
                    contents.append(info_row("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", time_range))
                except:
                    contents.append(info_row("‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", ticket_data['appointment']))
        
        elif ticket_data['type'] == "Helpdesk":
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Helpdesk Type - ‡πÅ‡∏™‡∏î‡∏á Report
            if ticket_data['report'] != "None":
                contents.append({
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á:",
                            "size": "sm",
                            "color": "#AAAAAA",
                            "flex": 2
                        },
                        {
                            "type": "text",
                            "text": ticket_data['report'],
                            "size": "sm",
                            "wrap": True,
                            "flex": 4
                        }
                    ]
                })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        contents.append(status_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ticket_data['status'], status_color))
        
        return {
            "type": "flex",
            "altText": f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket {ticket_data['ticket_id']}",
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÑ Ticket {ticket_data['ticket_id']}",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#005BBB",
                            "align": "center"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "md",
                    "contents": contents
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "button",
                            "action": {
                                "type": "message",
                                "label": "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket",
                                "text": "‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
                            },
                            "style": "secondary",
                            "color": "#AAAAAA"
                        }
                    ]
                }
            }
        }
    except Exception as e:
        print("‚ùå Error creating flex message:", e)
        return None

def send_reply_message(reply_token, messages):
    try:
        body = {
            "replyToken": reply_token,
            "messages": messages
        }
        res = requests.post('https://api.line.me/v2/bot/message/reply', headers=LINE_HEADERS, json=body)
        print("üì§ Reply response:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Failed to reply:", e)
        traceback.print_exc()

def reply(reply_token, text):
    send_reply_message(reply_token, [{"type": "text", "text": text}])

def send_department_flex_message(reply_token):
    """‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    flex_message = {
        "type": "flex",
        "altText": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        "contents": {
            "type": "bubble",
            "size": "kilo",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#2E4053",
                        "align": "center"
                    },
                    {
                        "type": "text",
                        "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
                        "size": "sm",
                        "color": "#7F8C8D",
                        "align": "center",
                        "margin": "sm"
                    }
                ],
                "paddingBottom": "md",
                "backgroundColor": "#F8F9F9"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "separator",
                        "color": "#EAEDED"
                    },
                    # ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üëî",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£",
                            "text": "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£/‡πÄ‡∏•‡∏Ç‡∏≤‡∏ô‡∏∏‡∏Å‡∏≤‡∏£"
                        },
                        "backgroundColor": "#EBF5FB",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üîç",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô",
                            "text": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô"
                        },
                        "backgroundColor": "#EAFAF1",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "‚öñÔ∏è",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢",
                            "text": "‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏è‡∏´‡∏°‡∏≤‡∏¢"
                        },
                        "backgroundColor": "#FEF9E7",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üì¢",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£",
                            "text": "‡∏á‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£"
                        },
                        "backgroundColor": "#FDEDEC",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üìä",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô"
                        },
                        "backgroundColor": "#F5EEF8",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üíª",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®"
                        },
                        "backgroundColor": "#E8F8F5",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üè¢",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"
                        },
                        "backgroundColor": "#F9EBEA",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üéì",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£"
                        },
                        "backgroundColor": "#EAF2F8",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üí∞",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏•‡∏´‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤"
                        },
                        "backgroundColor": "#F5EEF8",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üíé",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ç‡∏°‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö"
                        },
                        "backgroundColor": "#FEF9E7",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üî¨",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
                        },
                        "backgroundColor": "#EAFAF1",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    # ‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üìà",
                                "size": "sm",
                                "flex": 1,
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
                                "size": "sm",
                                "flex": 4,
                                "weight": "bold",
                                "color": "#2E4053"
                            },
                            {
                                "type": "text",
                                "text": "‚Ä∫",
                                "size": "sm",
                                "flex": 1,
                                "align": "end",
                                "color": "#7F8C8D"
                            }
                        ],
                        "action": {
                            "type": "message",
                            "label": "‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
                            "text": "‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"
                        },
                        "backgroundColor": "#EBF5FB",
                        "paddingAll": "sm",
                        "cornerRadius": "md",
                        "margin": "sm"
                    },
                    {
                        "type": "separator",
                        "color": "#EAEDED",
                        "margin": "md"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
                        "size": "xxs",
                        "color": "#7F8C8D",
                        "align": "center",
                        "margin": "sm"
                    }
                ]
            },
            "styles": {
                "footer": {
                    "separator": True
                }
            }
        }
    }
    
    send_reply_message(reply_token, [flex_message])

def parse_issue_message(message):
    try:
        issue = re.search(r"‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤[:Ôºö]\s*(.*)", message)
        category = re.search(r"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó[:Ôºö]\s*(.*)", message)
        phone = re.search(r"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠[:Ôºö]\s*(.*)", message)
        department = re.search(r"‡πÅ‡∏ú‡∏ô‡∏Å[:Ôºö]\s*(.*)", message)
        if issue and category and phone:
            return {
                "issue": issue.group(1).strip(),
                "category": category.group(1).strip(),
                "phone": phone.group(1).strip(),
                "department": department.group(1).strip() if department else "-"
            }
        return None
    except:
        return None

def generate_ticket_id():
    now = datetime.now()
    return f"TICKET-{now.strftime('%Y%m%d%H%M%S')}"

def save_ticket_to_sheet(user_id, data, ticket_id):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Ticket ‡∏•‡∏á Google Sheet"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏° ' ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Google Sheets ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        phone_number = format_phone_number(data['phone'])
        
        sheet.append_row([
            ticket_id,
            user_id,
            data['issue'],
            data['category'],
            phone_number,  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            data.get('department', '-'),
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "None",
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # Appointment
            "None",  # Requeste
            "None",  # Report
            "Information"  # Type - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Information ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        ], value_input_option='USER_ENTERED')

        print(f"‚úÖ Ticket {ticket_id} saved as Information type")
        return True
    except Exception as e:
        print("‚ùå Error saving ticket:", e)
        traceback.print_exc()
        return False
    
def send_flex_choice(user_id):
    flex_message = {
        "type": "flex",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "spacing": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                        "size": "md",
                        "weight": "bold"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "horizontal",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#1DB446",
                        "action": {
                            "type": "message",
                            "label": "Service",
                            "text": "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤"
                        }
                    },
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#FF0000",
                        "action": {
                            "type": "message",
                            "label": "Helpdesk",
                            "text": "Helpdesk"
                        }
                    }
                ]
            }
        }
    }

    body = {
        "to": user_id,
        "messages": [flex_message]
    }

    try:
        res = requests.post('https://api.line.me/v2/bot/message/push', headers=LINE_HEADERS, json=body)
        print("üì§ Sent Flex Choice:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Error sending Flex Choice:", e)
        traceback.print_exc()

def send_flex_ticket_summary(user_id, data, ticket_id,type_vaul="Information"):
    flex_message = {
        "type": "flex",
        "altText": f"üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {ticket_id}",
        "contents": {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üìÑ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#1DB446"
                    }
                ]
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {"type": "text", "text": f"Ticket ID: {ticket_id}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {data.get('issue')}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡∏ä‡∏∑‡πà‡∏≠: {data.get('category')}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: {data.get('phone')}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡πÅ‡∏ú‡∏ô‡∏Å: {data.get('department', '-')}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", "wrap": True, "size": "sm"},
                    {"type": "text", "text": f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {type_vaul}", "wrap": True, "size": "sm"},
                ]
            }
        }
    }

    body = {
        "to": user_id,
        "messages": [flex_message]
    }

    try:
        res = requests.post('https://api.line.me/v2/bot/message/push', headers=LINE_HEADERS, json=body)
        print("üì§ Sent Flex Message:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Error sending Flex Message:", e)
        traceback.print_exc()

def handle_appointment(reply_token, user_id):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"""
    latest_ticket = get_latest_ticket(user_id)
    if not latest_ticket:
        reply(reply_token, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô state
    user_states[user_id] = {
        "step": "ask_appointment",
        "service_type": "Service",
        "email": latest_ticket.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', ''),
        "name": latest_ticket.get('‡∏ä‡∏∑‡πà‡∏≠', ''),
        "phone": str(latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '')),
        "department": latest_ticket.get('‡πÅ‡∏ú‡∏ô‡∏Å', ''),
        "ticket_id": generate_ticket_id()
    }
    
    send_date_picker(reply_token)

def send_date_picker(reply_token):
    # ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î min_date ‡πÅ‡∏•‡∏∞ max_date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ
    flex_message = {
        "type": "flex",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#005BBB"
                    },
                    {
                        "type": "text",
                        "text": "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ",
                        "margin": "sm",
                        "size": "sm",
                        "color": "#AAAAAA"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "datetimepicker",
                            "label": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                            "data": "action=select_date",
                            "mode": "date"
                            # ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î initial, min, max ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ
                        },
                        "style": "primary",
                        "color": "#1DB446"
                    }
                ]
            }
        }
    }
    
    send_reply_message(reply_token, [flex_message])

def send_time_picker(reply_token, selected_date):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    time_slots = [
        {"label": "05:00 - 06:00", "value": "05:00-06:00"},
        {"label": "06:00 - 07:00", "value": "06:00-07:00"},
        {"label": "07:00 - 08:00", "value": "07:00-08:00"},
        {"label": "08:00 - 09:00", "value": "08:00-09:00"},
        {"label": "09:00 - 10:00", "value": "09:00-10:00"},
        {"label": "10:00 - 11:00", "value": "10:00-11:00"},
        {"label": "11:00 - 12:00", "value": "11:00-12:00"},
        {"label": "13:00 - 14:00", "value": "13:00-14:00"},
        {"label": "14:00 - 15:00", "value": "14:00-15:00"},
        {"label": "15:00 - 16:00", "value": "15:00-16:00"}
    ]
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply buttons
    quick_reply_items = []
    for slot in time_slots:
        quick_reply_items.append({
            "type": "action",
            "action": {
                "type": "message",
                "label": slot["label"],
                "text": slot["value"]
            }
        })
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á
    quick_reply_items.append({
        "type": "action",
        "action": {
            "type": "message",
            "label": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á",
            "text": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á"
        }
    })
    
    message = {
        "type": "text",
        "text": f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_date}\n\n‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á:",
        "quickReply": {
            "items": quick_reply_items
        }
    }
    
    send_reply_message(reply_token, [message])

def send_appointment_quick_reply(reply_token):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    time_slots = [
        "05:00-06:00", "06:00-07:00", "07:00-08:00",
        "09:00-10:00", "10:00-11:00", "11:00-12:00",
        "13:00-14:00", "14:00-15:00", "15:00-16:00"
    ]
    
    quick_reply_items = []
    for slot in time_slots:
        quick_reply_items.append({
            "type": "action",
            "action": {
                "type": "message",
                "label": slot,
                "text": f"‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ {slot}"
            }
        })
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á
    quick_reply_items.append({
        "type": "action",
        "action": {
            "type": "message",
            "label": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á",
            "text": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏≠‡∏á"
        }
    })
    
    message = {
        "type": "text",
        "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM-HH:MM",
        "quickReply": {
            "items": quick_reply_items
        }
    }
    send_reply_message(reply_token, [message])

def handle_save_appointment(reply_token, user_id, appointment_datetime):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    if user_id not in user_states or user_states[user_id].get("step") != "ask_appointment":
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        return
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
    user_states[user_id]["step"] = "ask_request"
    user_states[user_id]["appointment_datetime"] = appointment_datetime
    
    reply(reply_token, "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

def handle_user_request(reply_token, user_id, request_text):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å"""
    if user_id not in user_states or user_states[user_id].get("step") != "ask_request":
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        return
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô confirm
    user_states[user_id]["request_text"] = request_text
    user_states[user_id]["step"] = "pre_service"
    
    # ‡∏™‡πà‡∏á Confirm Message
    confirm_msg = create_confirm_message(
        "service",
        f"‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: {user_states[user_id]['appointment_datetime']}\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: {request_text}"
    )
    send_reply_message(reply_token, [confirm_msg])

def save_appointment_with_request(ticket_id, user_id, email, name, phone, department, appointment_datetime, request_text):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏•‡∏á Google Sheet"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ticket ID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        existing_tickets = sheet.col_values(1)
        if ticket_id in existing_tickets:
            ticket_id = generate_ticket_id()
            
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        formatted_phone = format_phone_number(phone)
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        sheet.append_row([
            ticket_id,
            user_id,
            email,
            name,
            formatted_phone,  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            department,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Pending",
            appointment_datetime,
            request_text if request_text else "None",  # Requeste
            "None",  # Report
            "Service"  # Type - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        ], value_input_option='USER_ENTERED')
        
        print(f"‚úÖ Saved Service ticket: {ticket_id}")
        return True
    except Exception as e:
        print("‚ùå Error saving Service ticket:", e)
        traceback.print_exc()
        return False

def send_ticket_summary_with_request(user_id, ticket_id, appointment_datetime, request_text, email, name, phone, department, type_value="Service"):
    try:
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        date_part, time_range = appointment_datetime.split()
        dt = datetime.strptime(date_part, "%Y-%m-%d")
        formatted_date = dt.strftime("%d/%m/%Y")
        start_time, end_time = time_range.split('-')
        
        flex_message = {
            "type": "flex",
            "altText": f"‡∏™‡∏£‡∏∏‡∏õ Ticket {ticket_id}",
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÑ Ticket {ticket_id}",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#005BBB"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        info_row("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", email),
                        info_row("‡∏ä‡∏∑‡πà‡∏≠", name),
                        info_row("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", display_phone_number(phone)),
                        info_row("‡πÅ‡∏ú‡∏ô‡∏Å", department),
                        info_row("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", formatted_date),
                        info_row("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", f"{start_time} - {end_time}"),
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        info_row("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", type_value),
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:",
                                    "size": "sm",
                                    "color": "#AAAAAA",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": request_text,
                                    "size": "sm",
                                    "wrap": True,
                                    "flex": 4
                                }
                            ]
                        },
                        status_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "Pending", "#005BBB")
                    ]
                }
            }
        }

        body = {
            "to": user_id,
            "messages": [flex_message]
        }

        res = requests.post('https://api.line.me/v2/bot/message/push', headers=LINE_HEADERS, json=body)
        print("üì§ Sent Ticket Summary with Request:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Error sending Ticket Summary with Request:", e)
        traceback.print_exc()

def is_time_before(start_time, end_time):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"""
    try:
        start_h, start_m = map(int, start_time.split(':'))
        end_h, end_m = map(int, end_time.split(':'))
        
        if start_h < end_h:
            return True
        elif start_h == end_h and start_m < end_m:
            return True
        return False
    except:
        return False

def save_appointment_to_sheet(ticket_id, appointment_datetime):
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        
        # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Ticket ID
        cell = sheet.find(ticket_id)
        if not cell:
            return False
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Appointment (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 9)
        sheet.update_cell(cell.row, 9, appointment_datetime)
        
        print(f"‚úÖ Updated appointment for {ticket_id}: {appointment_datetime}")
        return True
    except Exception as e:
        print("‚ùå Error saving appointment:", e)
        traceback.print_exc()
        return False

def get_latest_ticket(user_id):
    """‡∏î‡∏∂‡∏á Ticket ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return None
            
        data = sheet.get_all_records()
        
        user_tickets = [r for r in data if str(r.get('User ID', '')).strip() == str(user_id).strip()]
        
        if not user_tickets:
            return None
            
        latest_ticket = max(user_tickets, key=lambda x: datetime.strptime(x.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á', ''), "%Y-%m-%d %H:%M:%S"))
        
        phone = str(latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', ''))
        phone = phone.replace("'", "")  # ‡∏•‡∏ö ' ‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏¢ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)
        if phone and not phone.startswith('0'):
            phone = '0' + phone[-9:]  # ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 10 ‡∏´‡∏•‡∏±‡∏Å
            
        latest_ticket['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'] = phone
        
        return latest_ticket
    except Exception as e:
        print("‚ùå Error getting latest ticket:", e)
        traceback.print_exc()
        return None

def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.fullmatch(pattern, email) is not None

def check_existing_email(email):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False
            
        data = sheet.get_all_records()
        
        for row in data:
            if (row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '').lower() == email.lower() or 
                row.get('issue', '').lower() == email.lower()):
                return True
        return False
    except Exception as e:
        print("‚ùå Error checking email:", e)
        traceback.print_exc()
        return False
    
def check_existing_user(user_id):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return False
            
        data = sheet.get_all_records()
        
        for row in data:
            if str(row.get('User ID', '')).strip() == str(user_id).strip():
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)
                if row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•') or row.get('issue'):
                    return True
        return False
    except Exception as e:
        print("‚ùå Error checking user ID:", e)
        traceback.print_exc()
        return False

def check_ticket_status(ticket_id):
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        data = sheet.get_all_records()

        for row in data:
            if row.get('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket') == ticket_id or row.get('Ticket ID') == ticket_id:
                return (
                    f"\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•') or row.get('issue') or '-'}\n"
                    f"‡∏ä‡∏∑‡πà‡∏≠: {row.get('‡∏ä‡∏∑‡πà‡∏≠') or row.get('category') or '-'}\n"
                    f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: {display_phone_number(row.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠') or row.get('phone'))}\n"
                    f"‡πÅ‡∏ú‡∏ô‡∏Å: {row.get('‡πÅ‡∏ú‡∏ô‡∏Å') or row.get('department') or '-'}\n"
                    f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {row.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') or row.get('status') or '-'}"
                )

        return None
    except Exception as e:
        print("‚ùå Error checking status:", e)
        traceback.print_exc()
        return None

def handle_helpdesk(reply_token, user_id):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Helpdesk"""
    latest_ticket = get_latest_ticket(user_id)
    if not latest_ticket:
        reply(reply_token, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô state
    user_states[user_id] = {
        "step": "ask_helpdesk_issue",
        "service_type": "Helpdesk",
        "email": latest_ticket.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', ''),
        "name": latest_ticket.get('‡∏ä‡∏∑‡πà‡∏≠', ''),
        "phone": str(latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '')),
        "department": latest_ticket.get('‡πÅ‡∏ú‡∏ô‡∏Å', '')
    }
    
    send_helpdesk_quick_reply(reply_token)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô string
    phone = str(latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '')) if latest_ticket.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠') else ""
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Helpdesk
    user_states[user_id] = {
        "step": "ask_helpdesk_issue",
        "ticket_id": generate_ticket_id(),
        "email": latest_ticket.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', ''),
        "name": latest_ticket.get('‡∏ä‡∏∑‡πà‡∏≠', ''),
        "phone": phone,
        "department": latest_ticket.get('‡πÅ‡∏ú‡∏ô‡∏Å', '')
    }
    
    # ‡∏™‡πà‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    send_helpdesk_quick_reply(reply_token)

def send_helpdesk_quick_reply(reply_token):
    """‡∏™‡πà‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
    quick_reply_items = [
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏µ‡∏¢",
                "text": "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏µ‡∏¢"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏•‡πà‡∏°",
                "text": "‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏•‡πà‡∏°"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                "text": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢",
                "text": "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ",
                "text": "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
            }
        },
    ]
    
    message = {
        "type": "text",
        "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤:",
        "quickReply": {
            "items": quick_reply_items
        }
    }
    send_reply_message(reply_token, [message])

def handle_helpdesk_issue(reply_token, user_id, issue_text):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á"""
    if user_id not in user_states or user_states[user_id].get("step") != "ask_helpdesk_issue":
        reply(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        return
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô confirm
    user_states[user_id]["issue_text"] = issue_text
    user_states[user_id]["step"] = "pre_helpdesk"
    
    # ‡∏™‡πà‡∏á Confirm Message
    confirm_msg = create_confirm_message(
        "helpdesk",
        f"‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {issue_text}"
    )
    send_reply_message(reply_token, [confirm_msg])

def save_helpdesk_to_sheet(ticket_id, user_id, email, name, phone, department, report_time, appointment_time, issue_text):
    try:
        scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open("Tickets").sheet1
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ticket ID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        existing_tickets = sheet.col_values(1)
        if ticket_id in existing_tickets:
            ticket_id = generate_ticket_id()
            
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        formatted_phone = format_phone_number(phone)
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        sheet.append_row([
            ticket_id,
            user_id,
            email,
            name,
            formatted_phone,  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            department,
            report_time,
            "Pending",
            appointment_time,
            "None",  # Requeste
            issue_text if issue_text else "None",  # Report
            "Helpdesk"  # Type - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô Helpdesk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        ], value_input_option='USER_ENTERED')
        
        print(f"‚úÖ Saved Helpdesk ticket: {ticket_id}")
        return True
    except Exception as e:
        print("‚ùå Error saving Helpdesk ticket:", e)
        traceback.print_exc()
        return False

def send_helpdesk_summary(user_id, ticket_id, report_time, issue_text, email, name, phone, department, type_value="Helpdesk"):
    try:
        flex_message = {
            "type": "flex",
            "altText": f"‡∏™‡∏£‡∏∏‡∏õ Ticket {ticket_id}",
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"üìÑ Ticket {ticket_id}",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#005BBB"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        info_row("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", email),
                        info_row("‡∏ä‡∏∑‡πà‡∏≠", name),
                        info_row("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", display_phone_number(phone)),
                        info_row("‡πÅ‡∏ú‡∏ô‡∏Å", department),
                        info_row("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", report_time),
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        info_row("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", type_value),
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤:",
                                    "size": "sm",
                                    "color": "#AAAAAA",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": report_time,
                                    "size": "sm",
                                    "wrap": True,
                                    "flex": 4
                                }
                            ]
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á:",
                                    "size": "sm",
                                    "color": "#AAAAAA",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": issue_text,
                                    "size": "sm",
                                    "wrap": True,
                                    "flex": 4
                                }
                            ]
                        },
                        status_row("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "Pending", "#005BBB")
                    ]
                }
            }
        }

        body = {
            "to": user_id,
            "messages": [flex_message]
        }

        res = requests.post('https://api.line.me/v2/bot/message/push', headers=LINE_HEADERS, json=body)
        print("üì§ Sent Helpdesk Summary:", res.status_code, res.text)
    except Exception as e:
        print("‚ùå Error sending Helpdesk Summary:", e)
        traceback.print_exc()

def get_all_user_tickets(user_id):
    """‡∏î‡∏∂‡∏á Ticket ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Sheets"""
    try:
        sheet = get_google_sheet()
        if not sheet:
            return None
            
        data = sheet.get_all_records()
        
        user_tickets = []
        for row in data:
            if str(row.get('User ID', '')).strip() == str(user_id).strip():
                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                phone = str(row.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', ''))
                phone = phone.replace("'", "")
                if phone and not phone.startswith('0'):
                    phone = '0' + phone[-9:]
                
                ticket_data = {
                    'ticket_id': row.get('Ticket ID', 'TICKET-UNKNOWN'),
                    'email': row.get('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                    'name': row.get('‡∏ä‡∏∑‡πà‡∏≠', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                    'phone': phone,
                    'department': row.get('‡πÅ‡∏ú‡∏ô‡∏Å', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                    'date': row.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                    'status': row.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'Pending'),
                    'appointment': row.get('Appointment', 'None'),
                    'requeste': row.get('Requeste', 'None'),
                    'report': row.get('Report', 'None'),
                    'type': row.get('Type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                }
                user_tickets.append(ticket_data)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á (‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô)
        user_tickets.sort(key=lambda x: datetime.strptime(x['date'], "%Y-%m-%d %H:%M:%S") if x['date'] != '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' else datetime.min, reverse=True)
        
        return user_tickets
    except Exception as e:
        print("‚ùå Error getting user tickets:", e)
        traceback.print_exc()
        return None
    
def create_confirm_message(action_type, details):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Confirm Message ‡∏î‡πâ‡∏ß‡∏¢ Flex"""
    return {
        "type": "flex",
        "altText": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#005BBB"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£{action_type}‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                        "margin": "md",
                        "size": "md"
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "text",
                        "text": details[:100] + "..." if len(details) > 100 else details,
                        "margin": "lg",
                        "wrap": True,
                        "size": "sm",
                        "color": "#666666"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "horizontal",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#1DB446",
                        "action": {
                            "type": "message",
                            "label": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                            "text": f"confirm_{action_type}"
                        }
                    },
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#FF0000",
                        "action": {
                            "type": "message",
                            "label": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                            "text": f"cancel_{action_type}"
                        }
                    }
                ]
            }
        }
    }

def display_phone_number(phone):
    try:
        phone_str = str(phone).strip().replace("'", "").replace('"', "")
        if phone_str.startswith("66") and len(phone_str) == 11:
            return "0" + phone_str[2:]
        if len(phone_str) == 9 and not phone_str.startswith("0"):
            return "0" + phone_str
        return phone_str
    except:
        return "-"
def format_phone_number(phone):
    """
    ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏Ç 0 ‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ' ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
    """
    if phone is None:
        return "''"  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ '
    
    phone_str = str(phone).strip()
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if not phone_str.isdigit():
        return "''"
    
    # ‡πÄ‡∏ï‡∏¥‡∏° ' ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£
    return f"'{phone_str}"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 3000))
    LINE_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
    GOOGLE_CREDS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    app.run(host="0.0.0.0", port=port, debug=True)